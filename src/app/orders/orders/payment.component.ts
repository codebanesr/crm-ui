import { Component, NgZone, OnInit } from "@angular/core";
import { MatSnackBar } from "@angular/material/snack-bar";
import { ActivatedRoute } from "@angular/router";
import {
  CreateOrderDto,
  OrderCreated,
  RAZORPAY_VerificationType,
} from "src/app/home/interfaces/global.interfaces";
import { environment } from "src/environments/environment";
import { RazorpayOption } from "../models/razorpay.options";
import { OrdersService } from "../orders.service";
import { RazorpayWrapper } from "../rzpWrapper";

@Component({
  selector: "app-orders",
})
export class PaymentComponent implements OnInit {
  constructor(
    private ngZone: NgZone,
    private activatedRoute: ActivatedRoute,
    private orderService: OrdersService,
    private snack: MatSnackBar
  ) {}

  createdOrder: CreateOrderDto;
  ngOnInit(): void {
    this.createdOrder = this.activatedRoute.snapshot
      .queryParams as CreateOrderDto;
    this.init();
  }

  async init() {
    const wrapper = new RazorpayWrapper(this.ngZone);
    const order_id = this.activatedRoute.snapshot.paramMap.get("order_id");

    const options: RazorpayOption = {
      description: "Payment for moleculesystem crm",
      key: environment.razorPayKey, // Change this
      order_id: order_id, // to be generated by /orders/create backend
      amount: this.createdOrder.amount,
      name: "Shanur Rahman",
      prefill: {
        email: "shanur@moleculesystem.com",
        contact: "+919199946568",
        name: "Molecule Systems",
      },
    };

    try {
      const verificationDetails = await wrapper.open(options);
      const result = await this.orderService
        .verifyAndCapturePayment(verificationDetails)
        .toPromise();

      if (result.status === RAZORPAY_VerificationType.OK) {
        this.snack.open("Payment Successful, routing to lead page", "cancel");
      } else if (result.status === RAZORPAY_VerificationType.INVALID) {
        this.snack.open(
          "Payment failed, please try different payment method",
          "cancel"
        );
      } else {
        this.snack.open("Something went wrong");
      }
    } catch (e) {
      console.error(e);
    }
  }
}
